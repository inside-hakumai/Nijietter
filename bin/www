#!/usr/bin/env node
"use strict";

const app           = require('../app');
const debug         = require('debug')('tmp:server');
const http          = require('http');
const child_process = require('child_process');
const path          = require('path');
const Logger        = require('../lib/logger.js');

let server;
let io;
const sessionMiddleware    = app.session;
const MAX_CONNECTION_NUM   = 5;
const connecting_processes = [];
const logger               = new Logger('app_main');
const image_stack          = {};


logger.debug('Waiting for estimator to ready...');

const estimator_process = child_process.fork('./lib/app/app_estimator.js');
estimator_process.on('exit', (code, signal) => {
   throw new Error(`Estimator process was finished with code ${code} and signal ${signal}`);
});

const db_process = child_process.fork('./lib/app/app_sqlite.js');
db_process.on('exit', (code, signal) => {
   throw new Error(`Database process was finished with code ${code} and signal ${signal}`);
});

estimator_process.on('message', (m) => {
   switch(m['type']){
      case 'ready':
         logger.debug('Estimator gets ready.');

         const port = normalizePort(process.env.PORT || '3000');
         app.set('port', port);
         server = http.createServer(app);
         io = require('socket.io')(server);

         server.listen(port);
         server.on('error', onError);
         server.on('listening', onListening);
         logger.debug(`Launch web server with port ${port}`);

         io.use((socket, next) => {
            sessionMiddleware(socket.request, socket.request.res, next);
         });

         io.use((socket, next) => {
            if (socket.request.session.passport !== undefined){
               next();
            } else {
               next(new Error('Authentication error'));
            }
         });

         io.on('connection', (socket) => {
            const socket_id = socket.conn.id;
            const session_id = socket.request.sessionID;
            const session_data = socket.request.session;
            logger.debug(`[${session_id}] Establish new connection`);
            const streaming_process = get_child_process(
               session_id,
               socket.id,
               session_data.passport.user.id,
               session_data.passport.user.twitter_token,
               session_data.passport.user.twitter_token_secret
            );

            socket.on('logout', () => {
               streaming_process.kill('SIGINT');
               socket.request.session.destroy();
               logger.debug('[$session_id] Session is closed');
               io.to(socket_id).emit('session_broken');
            });

            socket.on('image_bool', (data) => {
               db_process.send({
                  type: 'update_bool',
                  data: {
                     media_id: data['media_id'],
                     bool: data['bool'],
                  }
               });
            });
         });
         break;

      case 'prediction_result':
         logger.debug(`Received prediction result: socket_id=${m['data']['socket_id']}, media_id=${m['data']['socket_id']}`);

         const prediction_data = m['data'];
         const socket_id = prediction_data['socket_id'];
         const media_id = prediction_data['media_id'];
         const prediction = prediction_data['result'];

         const data = stack_pop(socket_id, media_id);

         data['process'].send({
            type: 'sync_prediction',
            data: {
               media_id: media_id,
               prediction: prediction
            }
         });

         io.to(socket_id).emit('new_image', {
            media_id: media_id,
            path: data['path'],
            url: data['url'],
            prediction: prediction
         });
         break;

      default:
         throw new Error(`Unrecognized message type: ${JSON.stringify(m)}`);
   }
});

function get_child_process(session_id, socket_id, twitter_id, token, token_secret) {
   if (Object.keys(connecting_processes).length < MAX_CONNECTION_NUM) {

      let process = get_streaming_process(session_id);
      if (process) {
         logger.debug(`[${session_id}] Reconnect to existing streaming process`);
         process.update_socket(socket_id);
         return process;
      } else {
         logger.debug(`[${session_id}] Launch new streaming process`);
         const new_process = new ChildStreamingProcess(session_id, socket_id, twitter_id, token, token_secret);
         connecting_processes.push(new_process);
         return new_process;
      }
   } else {
      throw Error('Maximum process number reached');
   }
}

class ChildStreamingProcess {

   constructor(session_id, socket_id, twitter_id, token, token_secret) {
      this.process = child_process.fork('./lib/app/app_twstream.js');
      this.session_id = session_id;
      this.socket_id = socket_id;

      this.process.on('message', (m) => {
         switch (m['type']) {
            case 'ready':
               this.process.send({
                  type: 'initialize',
                  data: {
                     socket_id: socket_id,
                     id: twitter_id,
                     token: token,
                     token_secret: token_secret,
                  }
               });
               break;

            case 'send_image':
               const data = m['data'];
               const relative_path = path.relative(__dirname, data['path']);
               logger.debug(`[${session_id}] Receive new image: ${relative_path}`);
               stack_push(this.process, data['socket_id'], data['media_id'], relative_path, data['url']);

               estimator_process.send({
                  type: 'prediction_request',
                  data: {
                     socket_id: data['socket_id'],
                     media_id: data['media_id'],
                     user: data['user'],
                     text: data['text'],
                  }
               });
               break;

            case 'restore':
               const stack = m['data']['images'].map((data) => {
                  return {
                     media_id: data['media_id'],
                     path: path.relative(__dirname, data['path']),
                     url: data['url'],
                     prediction: data['prediction'],
                  };
               });
               logger.debug(`[${session_id}] Restore images: ${stack.toString()}`);
               io.to(m['data']['socket_id']).emit('restore', stack);
               break;

            default:
               throw new Error(`Unrecognized message type: ${m.toString()}`);
         }
      });
   }

   update_socket(socket_id) {
      this.socket_id = socket_id;
      this.process.send({
         type: 'update_socket',
         data: {
            'socket_id': socket_id
         }
      });
   }
}

function get_streaming_process(session_id) {
   for (let i = 0; i < connecting_processes.length; i++) {
      if (connecting_processes[i].session_id === session_id) {
         return connecting_processes[i];
      }
   }
   return null;
}

function stack_push(process, socket_id, media_id, path, url) {
   if (!image_stack[socket_id]) {
      image_stack[socket_id] = {};
   }
   image_stack[socket_id][media_id] = {
      process: process,
      path: path,
      url: url
   };
}

function stack_pop(socket_id, media_id) {
   if (!image_stack[socket_id] || !image_stack[socket_id][media_id]){
      throw new Error(`No such data in image stack: socket_id=${socket_id}, media_id=${media_id}`);
   } else {
      const return_data = Object.assign({}, image_stack[socket_id][media_id]);
      delete image_stack[socket_id][media_id];
      // console.log(JSON.stringify(image_stack));
      return return_data;
   }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
   const port = parseInt(val, 10);

   if (isNaN(port)) {
      // named pipe
      return val;
   }

   if (port >= 0) {
      // port number
      return port;
   }

   return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
   if (error.syscall !== 'listen') {
      throw error;
   }

   const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

   // handle specific listen errors with friendly messages
   switch (error.code) {
      case 'EACCES':
         console.error(bind + ' requires elevated privileges');
         process.exit(1);
         break;
      case 'EADDRINUSE':
         console.error(bind + ' is already in use');
         process.exit(1);
         break;
      default:
         throw error;
   }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
   const addr = server.address();
   const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
   debug('Listening on ' + bind);
}
